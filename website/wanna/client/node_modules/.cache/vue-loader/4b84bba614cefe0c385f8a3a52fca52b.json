{"remainingRequest":"C:\\Users\\Diana\\Documents\\GitHub\\levifashion\\website\\wanna\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Diana\\Documents\\GitHub\\levifashion\\website\\wanna\\client\\node_modules\\mdbvue\\src\\components\\Tables\\Datatable.vue?vue&type=style&index=0&id=1bd48bca&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\Diana\\Documents\\GitHub\\levifashion\\website\\wanna\\client\\node_modules\\mdbvue\\src\\components\\Tables\\Datatable.vue","mtime":499162500000},{"path":"C:\\Users\\Diana\\Documents\\GitHub\\levifashion\\website\\wanna\\client\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\Diana\\Documents\\GitHub\\levifashion\\website\\wanna\\client\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Diana\\Documents\\GitHub\\levifashion\\website\\wanna\\client\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Diana\\Documents\\GitHub\\levifashion\\website\\wanna\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Diana\\Documents\\GitHub\\levifashion\\website\\wanna\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.selectable-row {\n  cursor: pointer;\n  transition: all 0.4s ease-out;\n}\n\n.selectable-row:hover {\n  background-color: rgba(66, 133, 244, 0.1);\n}\n\n.selectable-row:focus {\n  outline: 1px solid #4285f4;\n  background-color: rgba(66, 133, 244, 0.1);\n}\n",{"version":3,"sources":["Datatable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+kBA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Datatable.vue","sourceRoot":"node_modules/mdbvue/src/components/Tables","sourcesContent":["<template>\n  <div class=\"dataTables_wrapper\" :style=\"wrapperStyle\">\n    <!-- Entries input and search -->\n    <mdb-row>\n      <mdb-col sm=\"6\" md=\"8\">\n        <mdb-row>\n          <mdb-col sm=\"12\" md=\"4\">\n            <datatable-select :title=\"entriesTitle\" v-if=\"pagination\" @getValue=\"updateEntries\" :options=\"options\"/>\n          </mdb-col>\n          <mdb-col class=\"pt-2\">\n            <mdb-btn @click=\"updateData\" v-if=\"refresh\" size=\"sm\" class=\"mt-4\" outline=\"primary\" >\n              <mdb-icon  icon=\"sync\" />\n            </mdb-btn>\n          </mdb-col>\n        </mdb-row>\n      </mdb-col>\n      <mdb-col sm=\"6\" md=\"4\" v-if=\"searching\">\n        <datatable-search class=\"mt-4 pt-2\" :placeholder=\"searchPlaceholder\" @getValue=\"updateSearch\" />\n      </mdb-col>\n    </mdb-row>\n    <!-- Entries input and search -->\n\n    <!-- Main table -->\n    <tbl v-if=\"!scrollY\" v-bind=\"tableProps\" sm datatable>\n      <tbl-head :color=\"headerColor\" :textWhite=\"headerWhite\">\n        <tr>\n          <th\n            v-for=\"column in columns\"\n            :key=\"column.field\"\n            class=\"th-sm sorting\"\n            v-on:click=\"sort(column.field, column.sort)\"\n          >\n            {{column.label}} <i v-if=\"sorting\" class=\"fas fa-sort float-right\"></i>\n          </th>\n        </tr>\n      </tbl-head>\n      <tbl-body>\n        <tr v-for=\"(row, i) in pages[activePage]\" :key=\"i\" :tabindex=\"focus &&'1'\" @focus=\"selectRow(i)\" :class=\"focus && 'selectable-row'\">\n          <td v-for=\"(value, key) in row\" :key=\"key\">\n            <div v-html=\"value\"></div>\n          </td>\n        </tr>\n        <tr v-if=\"!pages.length\">\n          <td :colspan=\"columns.length\">{{noFoundMessage}}</td>\n        </tr>\n      </tbl-body>\n      <tbl-head v-if=\"tfoot\" tag=\"tfoot\">\n        <tr>\n          <th\n            v-for=\"column in columns\"\n            :key=\"column.field+'_foot'\"\n            class=\"th-sm sorting\"\n          >\n            {{column.label}}\n          </th>\n        </tr>\n      </tbl-head>\n    </tbl>\n    <!-- Main table -->\n\n    <!-- ScrollY table -->\n    <div v-if=\"scrollY\" class=\"dataTables_scroll\">\n      <div v-if=\"scrollY\" class=\"dataTables_scrollHead\" style=\"padding-right: 15px\">\n        <div class=\"dataTables_scrollHeadInner\">\n          <tbl v-bind=\"tableProps\" sm datatable>\n            <tbl-head :color=\"headerColor\" :textWhite=\"headerWhite\">\n              <tr>\n                <th\n                  v-for=\"column in columns\"\n                  :key=\"column.field\"\n                  class=\"th-sm sorting\"\n                  v-on:click=\"sort(column.field, column.sort)\"\n                >\n                  {{column.label}} <i class=\"fas fa-sort float-right\"></i>\n                </th>\n              </tr>\n            </tbl-head>\n          </tbl>\n        </div>\n      </div>\n      <tbl v-bind=\"tableProps\" sm datatable>\n        <tbl-body>\n          <tr v-for=\"(row, i) in pages[activePage]\" :key=\"i\" :tabindex=\"focus &&'1'\" @focus=\"selectRow(i)\" :class=\"focus && 'selectable-row'\">\n            <td v-for=\"(value, key) in row\" :key=\"key\">\n              <div v-html=\"value\"></div>\n            </td>\n          </tr>\n          <tr v-if=\"!pages.length\">\n            <td :colspan=\"columns.length\">{{noFoundMessage}}</td>\n          </tr>\n        </tbl-body>\n      </tbl>\n      <div class=\"dataTables_scrollFoot\" style=\"padding-right: 15px\">\n        <div class=\"dataTables_scrollFootInner\">\n          <tbl v-bind=\"tableProps\" sm datatable>\n            <tbl-head v-if=\"tfoot\" tag=\"tfoot\">\n              <tr>\n                <th\n                  v-for=\"column in columns\"\n                  :key=\"column.field+'_foot'\"\n                  class=\"th-sm sorting\"\n                >\n                  {{column.label}}\n                </th>\n              </tr>\n            </tbl-head>\n          </tbl>\n        </div>\n      </div>\n    </div>\n    <!-- ScrollY table -->\n\n    <!-- Labels and pagination -->\n    <div v-if=\"pagination\" class=\"row\">\n      <div class=\"col-sm-12 col-md-5\">\n        <div class=\"dataTables_info\" role=\"status\" aria-live=\"polite\">\n          {{showingText}}: {{activePage > 0 ? activePage*entries : activePage+1}} - {{pages.length-1 > activePage ? pages[activePage].length*(activePage+1) : filteredRows.length}} ({{filteredRows.length}})\n        </div>\n      </div>\n      <div class=\"col-sm-12 col-md-7\">\n        <div class=\"dataTables_paginate float-right\">\n          <pagination id=\"pagination\">\n            <page-item\n              v-if=\"pages.length > display\"\n              v-on:click.native=\"changePage(0)\"\n              :disabled=\"activePage === 0 ? true : false\"\n            >\n              <mdb-icon v-if=\"arrows\"  icon=\"angle-double-left\" />\n              <p v-else class=\"pagination\">{{start}}</p>\n            </page-item>\n            <page-item\n              v-on:click.native=\"changePage(activePage-1)\"\n              :disabled=\"activePage === 0 ? true : false\"\n            >\n              <mdb-icon v-if=\"arrows\"  icon=\"angle-left\" />\n              <p v-else class=\"pagination\">{{previous}}</p>\n            </page-item>\n            <page-item\n              v-for=\"(page, index) in visiblePages\"\n              :key=\"index\"\n              v-on:click.native=\"changePage(pages.indexOf(visiblePages[index]))\"\n              :active=\"activePage === pages.indexOf(visiblePages[index]) ? true : false\"\n            >\n              {{pages.indexOf(visiblePages[index])+1}}\n            </page-item>\n            <page-item\n              v-on:click.native=\"changePage(activePage+1)\"\n              :disabled=\"activePage === pages.length-1 ? true : false\"\n            >\n              <mdb-icon v-if=\"arrows\"  icon=\"angle-right\" />\n              <p v-else class=\"pagination\">{{next}}</p>\n            </page-item>\n            <page-item\n              v-if=\"pages.length > display\"\n              v-on:click.native=\"changePage(pages.length-1)\"\n              :disabled=\"activePage === pages.length-1 ? true : false\"\n            >\n              <mdb-icon v-if=\"arrows\"  icon=\"angle-double-right\" />\n              <p v-else class=\"pagination\">{{end}}</p>\n            </page-item>\n          </pagination>\n        </div>\n      </div>\n    </div>\n    <!-- Labels and pagination -->\n\n  </div>\n</template>\n\n<script>\nimport Tbl from './Table';\nimport TblHead from './TableHead';\nimport TblBody from './TableBody';\nimport Pagination from '../Components/Pagination';\nimport PageItem from '../Components/PageItem';\nimport mdbInput from '../Forms/Input';\nimport DatatableSelect from './DatatableSelect';\nimport DatatableSearch from './DatatableSearch';\nimport mdbIcon from '../Content/Fa';\nimport mdbRow from '../Layout/Row';\nimport mdbCol from '../Layout/Col';\nimport mdbBtn from '../Components/Button';\n\nconst Datatable = {\n  name: 'Datatable',\n  props: {\n    data: {\n      type: [Object, String],\n      default: () => ({\n        columns: [],\n        rows: []\n      })\n    },\n    autoWidth: {\n      type: Boolean,\n      default: false\n    },\n    bordered: {\n      type: Boolean,\n      default: false\n    },\n    borderless: {\n      type: Boolean,\n      default: false\n    },\n    dark: {\n      type: Boolean,\n      default: false\n    },\n    fixed: {\n      type: Boolean,\n      default: false\n    },\n    headerColor: {\n      type: String\n    },\n    headerWhite: {\n      type: Boolean,\n      default: false\n    },\n    hover: {\n      type: Boolean,\n      default: false\n    },\n    maxWidth: {\n      type: String\n    },\n    maxHeight: {\n      type: String\n    },\n    order: {\n      type: Array\n    },\n    pagination: {\n      type: Boolean,\n      default: true\n    },\n    responsive: {\n      type: Boolean,\n      default: false\n    },\n    responsiveSm: {\n      type: Boolean,\n      default: false\n    },\n    responsiveMd: {\n      type: Boolean,\n      default: false\n    },\n    responsiveLg: {\n      type: Boolean,\n      default: false\n    },\n    responsiveXl: {\n      type: Boolean,\n      default: false\n    },\n    scrollY: {\n      type: Boolean,\n      defautl: false\n    },\n    searching: {\n      type: Boolean,\n      default: true\n    },\n    sorting: {\n      type: Boolean,\n      default: true\n    },\n    striped: {\n      type: Boolean,\n      default: false\n    },\n    start: {\n      type: String,\n      default: 'Start'\n    },\n    end: {\n      type: String,\n      default: 'End'\n    },\n    next: {\n      type: String,\n      default: 'Next'\n    },\n    previous: {\n      type: String,\n      default: 'Previos'\n    },\n    arrows: {\n      type: Boolean,\n      default: false\n    },\n    display: {\n      type: Number,\n      default: 5\n    }, \n    defaultRow: {\n      type: String,\n      default: '-'\n    },\n    defaultCol: {\n      type: String,\n      default: 'undefined'\n    },\n    tfoot: {\n      type: Boolean,\n      default: true\n    },\n    reactive: {\n      type: Boolean,\n      default: false\n    },\n    refresh: {\n      type: Boolean,\n      default: false\n    },\n    time: {\n      type: Number,\n      default: 5000\n    },\n    searchPlaceholder: {\n      type: String\n    },\n    entriesTitle: {\n      type: String\n    },\n    noFoundMessage: {\n      type: String,\n      default: 'No matching records found'\n    },\n    showingText: {\n      type: String,\n      default: \"Showing\"\n    },\n    focus: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      updatedKey: null,\n      reactiveFlag: false,\n      recentSort: null,\n      interval: null,\n      rows: this.data.rows || [],\n      columns: this.data.columns || [],\n      options: [10, 25, 50, 100],\n      entries: 10,\n      pages: [],\n      activePage: 0,\n      search: '',\n      tableProps: {\n        autoWidth: this.autoWidth,\n        bordered: this.bordered,\n        borderless: this.borderless,\n        dark: this.dark,\n        fixed: this.fixed,\n        hover: this.hover,\n        responsive: this.responsive,\n        responsiveSm: this.responsiveSm,\n        responsiveMd: this.responsiveMd,\n        responsiveLg: this.responsiveLg,\n        responsiveXl: this.responsiveXl,\n        striped: this.striped,\n        dtScrollY: this.scrollY,\n        maxHeight: this.maxHeight\n      },\n      wrapperStyle: {\n        maxWidth: this.maxWidth ? this.maxWidth : '100%',\n        margin: '0 auto'\n      }\n    };\n  },\n  components: {\n    DatatableSearch,\n    DatatableSelect,\n    Tbl,\n    TblHead,\n    TblBody,\n    Pagination,\n    PageItem,\n    mdbInput,\n    mdbIcon,\n    mdbRow,\n    mdbCol,\n    mdbBtn\n  },\n  computed: {\n    rowsDisplay(){\n      return this.formatRows();\n    },\n    // filter objects by parameters match\n    filteredRows() {\n      return this.rowsDisplay.filter(row => {\n        return row.filter(value => value\n          .toString()\n          .toLowerCase()\n          .match(this.search.toLowerCase()))\n          .length > 0;\n      });\n    },\n    visiblePages() {\n      let start = this.activePage - Math.floor(this.display/2) > 0 ? this.activePage - Math.floor(this.display/2) : 0;\n      let end = start + this.display < this.pages.length ? start + this.display : this.pages.length;\n      if (end - start < this.display && end - this.display >= 0) {\n        start = end - this.display;\n      };\n      return this.pages.slice(start, end);\n    },\n    componentKey(){\n      return this.updatedKey;\n    }\n  },\n  methods: {\n    changePage(index) {\n      this.activePage = index;\n    },\n    sort(field, sort) {\n      this.recentSort = {field, sort};\n      if (this.sorting) {\n        sort === 'asc' ?\n          this.rows.sort((a, b) => (a[field] > b[field] ? 1 : -1)) :\n          this.rows.sort((a, b) => (a[field] > b[field] ? -1 : 1));\n        this.columns[this.columns.findIndex(column => column.field === field)].sort = sort === 'asc' ? 'desc' : 'asc';\n      }\n    },\n    updateEntries(value) {\n      this.entries = value;\n    },\n    updateSearch(value) {\n      this.search = this.escapeRegExp(value);\n      this.activePage = 0;\n    },\n    filterArray(){\n      if (this.filter) {\n        this.rows.map(row => {\n          if (this.filteredArray.indexOf(row[this.filter]) === -1){\n            this.filteredArray.push(row[this.filter]);\n          }\n        });\n        this.filteredArray.sort();\n        this.filteredArray = this.filteredArray.filter((elem, index, self) => {\n          return index == self.indexOf(elem);\n        });\n\n        const existingOptions = this.filterOptions.map(option => option.value);\n        this.filteredArray.forEach(option => {\n          if (existingOptions.indexOf(option) === -1){\n            this.filterOptions.push({value: option, text: option});\n          }\n        });\n      }\n    },\n    escapeRegExp(string) {\n      return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    },\n    setDefaultColumns(){\n      this.columns.forEach((col, i) => {\n        if (!col){\n          this.columns[i] = {\n            label: this.defaultCol,\n            field: this.defaultCol.concat(i),\n            sort: 'asc'\n          };\n        }\n      });\n    },\n    formatRows(){\n      this.setDefaultColumns();\n      let arrRows = [];\n      let headers = this.columns.map(col => col.field);\n      this.rows.map(row => {\n        let newRow = [];\n        headers.forEach(header => {\n          let content = row[header] || this.defaultRow;\n          newRow.push(content);\n        });\n        arrRows.push(newRow);\n      });\n      return arrRows;\n    },\n    fetchData(){\n      fetch(this.data)\n        .then(res => res.json())\n        .then(json => {\n          this.columns = json.columns;\n          this.rows = json.rows;\n          this.$emit('fields', this.columns);\n        })\n        .then(data => {\n          if (this.recentSort){\n            this.sort(this.recentSort.field, this.recentSort.sort);\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    updateData(){\n      this.fetchData();\n      this.reactiveFlag = true;\n      this.updatedKey = Math.floor(Math.random()*100000000);\n    },\n    selectRow(index) {\n      let generalIndex = index;\n      this.pages.forEach((page, i) => {\n        if (i < this.activePage) {\n          generalIndex += page.length;\n        }\n      });\n      this.$emit('selectRow', generalIndex);\n    }\n  },\n  mounted() {\n    // bind data or download form API\n    if (typeof this.data === 'string') {\n      this.fetchData();\n    }\n    //reactivness in data table\n    if (this.reactive){\n      this.interval = setInterval(this.updateData, this.time);\n    }\n    // findout rows amount, and slice it into array (split into pages)\n    const pagesAmount = Math.ceil(this.filteredRows.length / this.entries);\n    this.pages = [];\n    if (this.pagination) {\n      for (let i=1; i<=pagesAmount; i++) {\n        const pageEndIndex = i*this.entries;\n        this.pages.push(this.filteredRows.slice(pageEndIndex-this.entries, pageEndIndex));\n      }\n    }\n    else {\n      this.pages.push(this.filteredRows);\n    }\n    this.activePage = 0;\n\n    // initial sorting\n    if (this.order) {\n      this.sort(this.columns[this.order[0]].field, this.order[1]);\n    }\n\n    this.$emit('pages', this.pages);\n    this.$emit('fields', this.columns);\n  },\n  watch: {\n    data(newVal) {\n      this.columns = newVal.columns;\n    },\n    rows(){\n      this.filterArray();\n    },\n    entries() {\n      // do the split every entry change (changing entries amount)\n      const pagesAmount = Math.ceil(this.filteredRows.length / this.entries);\n      this.pages = [];\n      for (let i=1; i<=pagesAmount; i++) {\n        const pageEndIndex = i*this.entries;\n        this.pages.push(this.filteredRows.slice(pageEndIndex-this.entries, pageEndIndex));\n      }\n      this.activePage = this.activePage < this.pages.length ? this.activePage : this.pages.length-1;\n\n      this.$emit('pages', this.pages);\n    },\n    filteredRows() {\n      const active = this.activePage;\n      // do the split on every change in rows (searching)\n      const pagesAmount = Math.ceil(this.filteredRows.length / this.entries);\n      this.pages = [];\n      if (this.pagination) {\n        for (let i=1; i<=pagesAmount; i++) {\n          const pageEndIndex = i*this.entries;\n          this.pages.push(this.filteredRows.slice(pageEndIndex-this.entries, pageEndIndex));\n        }\n      }\n      else {\n        this.pages.push(this.filteredRows);\n      }\n      if (this.reactiveFlag === false){\n        this.activePage = 0;\n      }\n      this.activePage = active;\n      this.$emit('pages', this.pages);\n    }\n  }\n};\n\nexport default Datatable;\nexport { Datatable as mdbDatatable };\n</script>\n\n<style scoped>\n.selectable-row {\n  cursor: pointer;\n  transition: all 0.4s ease-out;\n}\n\n.selectable-row:hover {\n  background-color: rgba(66, 133, 244, 0.1);\n}\n\n.selectable-row:focus {\n  outline: 1px solid #4285f4;\n  background-color: rgba(66, 133, 244, 0.1);\n}\n</style>\n\n<style>\n.pagination {\n  margin-bottom: 0px;\n}\n</style>\n"]}]}